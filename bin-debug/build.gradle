// NOTE: you also need to add the compile.service.lib.swc!

// BUILD PROPERTIES
project.ext {
  secureswf_dir = "${ant['basedir']}/obfuscation"
  src_dir = "src"
  build_dir = "${src_dir}/staging/"
  scripts_dir = "scripts"
  swf_version = "15"
  frame_rate = "40"
  swf_game_name = "GAME.swf"
  swf_loader_name = "gameloader.swf"
  obfuscation_loader_log = "obfuscation.loader.log"
  obfuscation_game_log = "obfuscation.game.log"
  // This variable is set by a special task
  service_swc_number = ""
  compile = {}
  // NOTE: you also need to add the service SWC when linking/compiling
  dependent_swc_libs = ["all.swc", "ChatUI.swc", "SFS2X_API_AS3.swc",
    "protoc-gen-as3-1.1.0/protobuf.swc", "GZIPEncoder_Flash.swc",
    "kixeye-core.swc", "protoc-gen-as3-1.1.0/protobuf.swc"]
}
compile['bitdamagelocation'] = "1024"
ant['FLEX_HOME'] = flex_sdk_location

ant.taskdef(resource: "flexTasks.tasks", classpath: "${ant.FLEX_HOME}/ant/lib/flexTasks.jar")
ant.taskdef(resource: "secureSWF/ui/ant/resources/task.properties", classpath: "${secureswf_dir}/secureSWF.jar")

// HOUSEKEEPING
task clean() << {
  for (release in [swf_game_name, swf_loader_name])
    for (obf_prefix in ['', 'obfuscated.'])
      new File("${build_dir}/${obf_prefix}${release}").delete()
}

task 'build-setup'() << {
  new File("${ant['basedir']}/${build_dir}").mkdir()
}

//
// Build debug versions
//
task 'build-game-debug'(dependsOn: [clean, 'generate-servicelib-number', 'build-setup'],
                        description: "Building a debug version of our main SWF") << {
  compile.service_lib_swc = "kixeye-services-lib-v${service_swc_number}.debug.swc"
  compile.debug = "true"
  compile.release = "false"
  compile.loadtest = "false"
  compile.notloadtest = "true"
  compile.debugconsole = "false"

  // BUILD DEBUG LOADER
  compile.local = "true"
  tasks['compile-loader'].execute()

  // BUILD DEBUG GAME
  compile.local = "false"
  tasks['compile-game'].execute()

  // PROFILING
  tasks['enable-telemetry'].execute()
}
// UTILITIES

//
// Build release versions
//
task 'build-game-release'(dependsOn: [clean, 'generate-servicelib-number', 'build-setup']) << {
  compile.service_lib_swc = "kixeye-services-lib-v${service_swc_number}.debug.swc"
  compile.debug = "false"
  compile.release = "true"
  compile.loadtest = "false"
  compile.notloadtest = "true"
  compile.debugconsole = "false"
  compile.local = "false"

  // BUILD RELEASE LOADER
  tasks['compile-loader'].execute()

  // BUILD RELEASE GAME
  tasks['compile-game'].execute()

  // OBFUSCATION
  tasks['obfuscate-loader'].execute()
  tasks['obfuscate-game'].execute()
}

task 'compile-game'(description: "Compiles the main SWF given some parameters") << {
  for (param in ['debug', 'release', 'local', 'loadtest', 'notloadtest', 'service_lib_swc'])
    println "${param}: ${compile[param]}"

  ant.mxmlc(output: "${build_dir}/${swf_game_name}",
            file: "${src_dir}/GAME.as", 'swf-version': swf_version,
            debug: compile.debug, 'verbose-stacktraces': compile.debug,
            fork: "true", maxmemory: mxmlc_jvm_memory) {

    for (param in ['debug', 'release', 'local', 'loadtest', 'notloadtest'])
      define name: "CONFIG::${param}", value: compile[param]

    'source-path' 'path-element': "${src_dir}"
    'library-path'(dir: "${src_dir}/bin", append: "true") {
      for (lib in dependent_swc_libs)
        include name: lib
      include name: compile.service_lib_swc
    }
    'library-path'(dir: "${enyo_dir}/compile", append: "true") {
      include name: "aibox.swc"
      include name: "constants.swc"
    }
    'default-frame-rate'() { frame_rate }
    'default-size' width: "760", height: "750"
    optimize() { "true" }
    strict() { "true" }
    'use-network'() { "true" }
    warnings() { "false" }
    'use-resource-bundle-metadata'() { "true " }
    'static-link-runtime-shared-libraries'() { "true" }
  }
}

task 'compile-loader'() << {
  for (param in ['debug', 'release', 'local', 'loadtest', 'notloadtest', 'service_lib_swc'])
    println "${param}: ${compile[param]}"

  ant.mxmlc(output: "${build_dir}/${swf_loader_name}",
            file: "${src_dir}/GAMELOADER.as",
            'swf-version': "${swf_version}",
            debug: "${compile.debug}",
            'verbose-stacktraces': "${compile.debug}",
            fork: "true", maxmemory: "${mxmlc_jvm_memory}") {
    for (param in ['debug', 'release', 'local', 'bitdamagelocation',
                   'debugconsole', 'loadtest', 'notloadtest'])
      define name: "CONFIG::${param}", value: compile[param]
    'source-path' 'path-element': "${src_dir}"
    'library-path'(dir: "${bin_dir}", append: "true") {
      include name: "Console.swc"
      include name: "gameloader.swc"
      include name: compile.service_lib_swc
      include name: "kixeye-core.swc"
    }
    'default-frame-rate'() { frame_rate }
    'default-size' width: "760", height: "750"
    optimize() { true }
    strict() { true }
    'use-network'() { true }
    warnings() { false }
    'use-resource-bundle-metadata'() { true }
    'static-link-runtime-shared-libraries'() { true }
  }
}

task 'generate-servicelib-number'() << {
  def pat = /kixeye\-services\-lib\-v(\d+)\.debug\.swc/
  // NOTE: there should be at most one match...
  new File(bin_dir).eachFileMatch ~pat, {
    println "got file ${it}"
    def m = it.name =~ pat
    project.service_swc_number = m[0][1]
  }
  println "swc num is ${service_swc_number}"
}

task 'enable-telemetry'() << {
  def swfs = [swf_loader_name, swf_game_name]
  def dir = new File("${ant['basedir']}/${scripts_dir}")
  // We gather references to the processes and then just wait for them to finish
  def procs = swfs.collect {
    "python enable_telemetry.py ${ant['basedir']}/${build_dir}/${it}".execute(null, dir)
  }
  procs*.waitFor()
  // TODO: check exit values!
}

task 'obfuscate-loader' << {
  ant.touch file: "${build_dir}/${obfuscation_loader_log}"
  // OBFUSCATE GAMELOADER

  ant.protect(
    Timestamp: "false",
    logFile: "${build_dir}/${obfuscation_loader_log}",
    Certificate: "",
    Encrypt: "false",
    ExportIntermediate: "false",
    NewDebugFilesName: "",
    NewDebugLinesNumber: "0",
    OutputMethod: "",
    OutputValue: "",
    Password: "",
    RandomSeed: "5333821",
    RenamingMode: "long",
    RenamingPrefix: "",
    DomainLockEncryptionType: "AES",
    DomainLocksEncryptionLevel: "9",
    FinalizeClasses: "true",
    FinalizeMethods: "true",
    FontOptimization: "0",
    ImageOptimization: "true",
    ImageRecompression: "7",
    InlineConstants: "true",
    LiteralsEncryptionLevel: "9",
    LiteralsEncryptionType: "AES",
    MakeReadOnlyFieldsConstants: "false",
    MergeCodeBlocks: "true",
    MergeCodeLinkage: "true",
    MergeLines: "1",
    OptimizeImports: "true",
    OptimizeIntegerArithmetics: "true",
    OptimizePushInstructions: "true",
    PreventLocalExecution: "false",
    PrivatizeFields: "true",
    PrivatizeMethods: "true",
    Randomize: "false",
    RemoveDeadcode: "true",
    RemoveDebugInfo: "true",
    RemoveFrameLabels: "true",
    RemoveMetadata: "true",
    RemoveMethodParametersNames: "true",
    RemoveTraceCalls: "true",
    RemoveUnusedFonts: "true",
    RemoveUnusedImages: "true",
    RemoveUnusedSounds: "true",
    RemoveUnusedSpritesAndShapes: "true",
    RemoveUnusedVideos: "true",
    RemoveWriteOnlyFields: "true",
    RenameLocalVariables: "false",
    ReplaceDebugFiles: "false",
    ReplaceDebugLines: "false",
    ShapeOptimization: "2",
    SortCPool: "true",
    StaticizeMethods: "true",
    SuperCompression: "true",
    TrimFontsData: "true",
    TrimShapesData: "true",
    TrimSwfTags: "true",
    UseAsKeywords: "false",
    rename: "true",
    slr: "3",
    controlFlow: "100",
    codeWrapping: "3",
    integerObfuscation: "true",
    renamingLevel: "6",
    postBuildCheck: "true",
    applicationPath: "${ant['basedir']}") {

    'InputFile' filePath: "${build_dir}/${swf_loader_name}",
                outputPath: "${build_dir}/obfuscated.${swf_loader_name}"
    for (name in ["wrap::wrapper/Data", "wrap::wrapper/_loader", "wrap::wrapper/_obj",
                  "wrap::wrapper/_completed", "::GAMELOADER/_mcLoading"])
      rule filter: name, rename: "false", renamingLevel: "0", postBuildCheck: "true"
  }
}

task 'obfuscate-game'() << {
  ant.touch file: "${build_dir}/${obfuscation_game_log}"

  // OBFUSCATE GAME
  ant.protect(
    Timestamp: "false",
    Certificate: "",
    logFile: "${build_dir}/${obfuscation_game_log}",
    Encrypt: "false",
    ExportIntermediate: "false",
    NewDebugFilesName: "",
    NewDebugLinesNumber: "1",
    OutputMethod: "",
    OutputValue: "",
    Password: "",
    RandomSeed: "5333821",
    RenamingMode: "binary",
    RenamingPrefix: "",
    DomainLockEncryptionType: "AES",
    DomainLocksEncryptionLevel: "9",
    FinalizeClasses: "false",
    FinalizeMethods: "false",
    FontOptimization: "0",
    ImageOptimization: "false",
    ImageRecompression: "0",
    InlineConstants: "true",
    LiteralsEncryptionLevel: "1",
    LiteralsEncryptionType: "RC4",
    MakeReadOnlyFieldsConstants: "false",
    MergeCodeBlocks: "false",
    MergeCodeLinkage: "false",
    MergeLines: "0",
    OptimizeImports: "true",
    OptimizeIntegerArithmetics: "true",
    OptimizePushInstructions: "true",
    PreventLocalExecution: "false",
    PrivatizeFields: "false",
    PrivatizeMethods: "false",
    Randomize: "false",
    RemoveDeadcode: "true",
    RemoveDebugInfo: "true",
    RemoveFrameLabels: "false",
    RemoveMetadata: "false",
    RemoveMethodParametersNames: "true",
    RemoveTraceCalls: "true",
    RemoveUnusedFonts: "true",
    RemoveUnusedImages: "true",
    RemoveUnusedSounds: "true",
    RemoveUnusedSpritesAndShapes: "true",
    RemoveUnusedVideos: "true",
    RemoveWriteOnlyFields: "false",
    RenameLocalVariables: "false",
    ReplaceDebugFiles: "false",
    ReplaceDebugLines: "false",
    ShapeOptimization: "0",
    SortCPool: "true",
    StaticizeMethods: "false",
    SuperCompression: "true",
    TrimFontsData: "true",
    TrimShapesData: "true",
    TrimSwfTags: "true",
    UseAsKeywords: "false",
    rename: "true",
    slr: "0",
    controlFlow: "0",
    codeWrapping: "2",
    integerObfuscation: "false",
    renamingLevel: "1",
    postBuildCheck: "true",
    applicationPath: "${ant['basedir']}") {

    'InputFile' filePath: "${build_dir}/${swf_game_name}",
                outputPath: "${build_dir}/obfuscated.${swf_game_name}"
    // domain lock settings
    //  domainLock value: "*.kixeye.com"
    // TODO: create a union of these ranges
    for (c in 'A'..'Z')
      literalString value: c, match: "contains"
    for (c in 'a'..'z')
      if (c != 'u')
        literalString value: c, match: "contains"
    for (c in '0'..'9')
      literalString value: c, match: "contains"

    // rules generated by identifiers selection
    for (name in ['::URLLoaderApi', "::LOGIN"])
      for (nested in ['', '/*'])
        rule filter: "${name}${nested}", renamingLevel: "3", slr: "3",
             controlFlow: "100", codeWrapping: "3", integerObfuscation: "true",
             postBuildCheck: "false"

    // TODO: deal with these 'outliars' in a loopish manner...
    rule filter: "::GLOBAL", renamingLevel: "3", postBuildCheck: "false"
    rule filter: "com.cc.utils::*", renamingLevel: "3", slr: "3",
         controlFlow: "100", codeWrapping: "3", integerObfuscation: "true",
         postBuildCheck: "true"
    // user set rules
    for (name in ['::GAME', '::Main'])
      for (nested in ['', '/Data'])
        rule filter: "${name}${nested}", rename: "false", renamingLevel: "0"

    // Alchemy and some buggy stuff...
    for (name in ["M__*", "global/C_Ru*", "*C_Ru*"])
      rule filter: name, rename: "false", slr: "0", controlFlow: "0",
           codeWrapping: "0", integerObfuscation: "false", postBuildCheck: "false"
  }
}

task 'damage-swf'() << {
  def game = "${build_dir}/${swf_game_name}"
  invertByte game, 1024
}

def invertByte(file, pos) {
  def f = new java.io.RandomAccessFile(file, "rwd")
  f.seek pos
  def b = f.readByte()
  b ^= 0xFF
  f.seek pos
  f.writeByte b
  f.close()
}
