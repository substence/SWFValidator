<?xml version="1.0" encoding="UTF-8"?>
<!-- build.xml -->
<!--Author : Will Reese - reese@kixeye.com-->
<!-- SVN FORCE CHANGE -->
<project name="War Commander Client" default="package" xmlns:ac="antlib:net.sf.antcontrib">

	<property name="product.name" value="War Commander Client"/>
	<property name="social.platform" value="fb"/>
	<property name="product.module" value="wc-fb-client"/>
	<property name="services.swc.version" value="12834"/>
	<property name="flex.sdk.version" value="4.6"/>
	<!-- commonant project type -->
	<property name="projecttype" value="wctrunk"/>
	<property name="package.manager" value="tar"/>

	<property name="root.dir" location="."/>
	<property name="src.dir" location="src" />
	<property name="scripts.dir" location="scripts" />
	<property name="build.dir" location="build" />
	<property name="build.bin.dir" value="commonant/booty" />
	<property name="dist.dir" location="dist" />
	<property name="package.dir" location="${build.dir}/package"/>
	<property name="release.dir" location="${build.dir}/release"/>

	<!-- Generic properties -->
	<property name="branch.name" value="trunk" />
	<property name="branch.module" value="client"/>
	<property name="repository.name" value="warlords" />
	<property name="branch.version" value="3.34.0" />
	<property name="tagging.model" value="STANDARD"/>
	<property name="svn.url" value="https://scm.kixeye.com/svn"/>
	<property name="obfuscation.flag" value="true"/>
	<property name="debug.only" value="false"/>

	<property name="s3.url" value="s3://war-fb"/>
	<property name="s3.env" value="gametest" />
	<property name="s3.production.env" value="game" />
	<property name="cdn.dev.environment" value="gamedev1"/>

	<property name="jenkins.url" value="https://build.sjc.kixeye.com"/>
	<property name="salt.build.project" value="WC-Administration"/>
	<property name="salt.build.instance" value="lastSuccessfulBuild"/>
	<property name="salt.build.url" value="${jenkins.url}/job/${salt.build.project}/${salt.build.instance}/artifact/salt.properties"/>

    <property name="battle.client.build.project" value="WC-BattleClient-Development1"/>
    <property name="battle.client.build.instance" value="lastSuccessfulBuild"/>
    <property name="battle.client.build.url" value="${jenkins.url}/job/${battle.client.build.project}/${battle.client.build.instance}"/>

	<property name="commonant.dir" location="${root.dir}/commonant"/>
	<property name="commonant.build.project" value="RE-CommonAnt"/>
	<property name="commonant.build.instance" value="lastSuccessfulBuild"/>
	<property name="commonant.build.url" value="${jenkins.url}/job/${commonant.build.project}/${commonant.build.instance}"/>
	<property name="get.commonant" value="true"/>

	<property name="S3" location="/usr/local/bin/s3cmd"/>
	<property name="global.as" location="${src.dir}/GLOBAL.as"/>

	<taskdef resource="net/sf/antcontrib/antlib.xml" >
      <classpath>
        <pathelement location="${ant.home}/lib/ant-contrib-0.3.jar" />
      </classpath>
    </taskdef>

	<property file="build.properties"/>
	<property name="time.zone" value="America/Los_Angeles"/>
	<property environment="env"/>
	<condition property="build.tools.dir" value="${env.BUILD_TOOLS}">
		<isset property="env.BUILD_TOOLS"/>
	</condition>
	<property name="build.tools.dir" location="${user.home}/Tools/build-tools"/>
	<import file="${build.tools.dir}/build-common.inc"/>

	<!-- OS Specific code -->
	<condition property="isWindows">
		<os family="windows" />
	</condition>

	<condition property="isUnix">
		<os family="unix" />
	</condition>

	<condition property="isMac">
		<os family="mac" />
	</condition>

	<target name="if_windows" if="isWindows">
		<property name="tools.dir" value="C:\" />
		<property name="FLEX_HOME" value="C:\Program Files (x86)\Adobe\Adobe Flash Builder 4.5\sdks\${flex.sdk.version}" />
	</target>

	<target name="if_unix" if="isUnix">
		<property name="tools.dir" value="/usr/local" />
		<property name="FLEX_HOME" value="/opt/sdks/flex_sdk_${flex.sdk.version}" />
	</target>

	<target name="if_mac" if="isMac">
		<property name="tools.dir" value="/usr/local" />
		<property name="FLEX_HOME" value="/Applications/Adobe Flash Builder 4.5/sdks/${flex.sdk.version}" />
	</target>

	<target name="-init-env" depends="if_windows,if_unix,if_mac">

	</target>

	<!-- Delete all output files -->
	<target name="clean">
		<delete dir="${build.bin.dir}" failOnError="false" includeEmptyDirs="true" />
		<delete dir="${build.dir}" failOnError="false" includeEmptyDirs="true" />
		<delete dir="${dist.dir}" failOnError="false" includeEmptyDirs="true" />
	</target>

	<target name="-init">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${dist.dir}"/>

		<!-- We only use .jenkins as a property file if indeed is a file;
		     this since we abuse ~/.jenkins, which *should* really be a directory
		-->
		<if>
		  <available file="${user.home}/.jenkins" type="file"/>
			<then><property file="${user.home}/.jenkins"/></then>
			<else><property file="${user.home}/.jenkins_auth"/></else>
  	</if>

	  	<property name="full.build.only" value="false"/>
	  	<condition property="full.build.only.enabled" value="true">
			<equals arg1="${full.build.only}" arg2="true"/>
		</condition>
		<condition property="get.commonant.enabled" value="true">
			<equals arg1="${get.commonant}" arg2="true"/>
		</condition>
		<condition property="swf.telemetry.enabled" value="true">
			<equals arg1="${enable.swf.telemetry}" arg2="true"/>
		</condition>
	</target>

    <target name="getObfuscateFlag">
    	<if>
        	<equals arg1="false" arg2="${obfuscation.flag}" />
    	<then>
        	<property name="disableobfuscation" value="true" />
        </then>
        </if>
    </target>

	<!-- ********************************************************************************** -->
	<!--							Packaging Targets										-->
	<!-- ********************************************************************************** -->
	<target name="callwithnoobfuscation" if="disableobfuscation">
        <ant target="${projecttype}" dir="commonant" antFile="build.xml" inheritAll="false">
			<property name="services.swc.version" value="${services.swc.version}"/>
        	<property name="load.test" value="${load.test}"/>
        	<property name="debug.only" value="${debug.only}"/>
        	<property name="FLEX_HOME" value="${FLEX_HOME}"/>
		</ant>
	</target>

	<target name="callwithobfuscation" unless="disableobfuscation">
        <ant target="${projecttype}" dir="commonant" antFile="build.xml" inheritAll="false">
			<property name="obfuscation" value="true"/>
			<property name="services.swc.version" value="${services.swc.version}"/>
        	<property name="load.test" value="${load.test}"/>
        	<property name="debug.only" value="${debug.only}"/>
        	<property name="FLEX_HOME" value="${FLEX_HOME}"/>
		</ant>
	</target>


	<target name="compile" depends="-init-env, -init, init-common, -get-salt-properties, update-salt, -get-versions, get-commonant, getObfuscateFlag">

		<antcall target="get-dependent-libs"/>

		<condition property="disableobfuscation" value="true">
			<equals arg1="${disableobfuscation}" arg2="true"/>
		</condition>

		<parallel>
			<antcall target="callwithobfuscation"/>
			<antcall target="callwithnoobfuscation"/>
		</parallel>

	</target>


	<target name="get-dependent-libs" depends="-init">
		<property name="battle.client.swc.url" value="${battle.client.build.url}/artifact/dist/aibox.swc"/>
		<get src="${battle.client.swc.url}" dest="src/bin/aibox.swc" username="${jenkins.username}" password="${jenkins.password}"/>

		<property name="battle.client.constants.url" value="${battle.client.build.url}/artifact/dist/constants.swc"/>
		<get src="${battle.client.constants.url}" dest="src/bin/constants.swc" username="${jenkins.username}" password="${jenkins.password}"/>

		<property name="battle.client.version.properties.url" value="${battle.client.build.url}/artifact/dist/version.properties"/>
		<get src="${battle.client.version.properties.url}" dest="${src.dir}/bin/battleclient.version.properties" username="${jenkins.username}" password="${jenkins.password}"/>
    </target>

	<target name="package" depends="clean, compile, -set-versions-file">
		<antcall target="-get-incremental-list"/>
		<!-- <antcall target="-get-release-incremental-list"/> -->

		<antcall target="build-client-incremental"/>
		<antcall target="build-client-full"/>

		<antcall target="build-assets-incremental"/>
		<antcall target="build-assets-full"/>
	</target>

	<target name="dist" depends="package">
		<copy file="${versions.file}" todir="${dist.dir}"/>
		<if>
			<not><equals arg1="${full.build.only}" arg2="true"/></not>
			<then>
				<copy file="${build.dir}/${client.archive.name}.tgz" todir="${dist.dir}"/>
				<copy file="${build.dir}/${assets.archive.name}.tgz" todir="${dist.dir}"/>
				<copy file="${build.dir}/build_file.list" todir="${dist.dir}"/>
			</then>
		</if>
		<copy file="${build.dir}/${client.archive.name}-full.tgz" todir="${dist.dir}"/>
		<copy file="${build.dir}/${assets.archive.name}-full.tgz" todir="${dist.dir}"/>
		<copy file="${build.dir}/salt.properties" todir="${dist.dir}"/>
		<copy todir="${dist.dir}">
			<fileset dir="${build.bin.dir}">
				<include name="*.swf"/>
				<include name="*.mappingTable.*"/>
			</fileset>
		</copy>
		<antcall target="checksum-artifacts"/>
	</target>

	<target name="package-wrapped-swfs">
		<echo message="Packaging secured wrapped SWFs"/>
		<copy file="${build.bin.dir}/wrapped-secure.debug.swf"
			tofile="${package.dir}/game-v${build.hard.version}.v${build.soft.version}.debug.swf" overwrite="true"/>
		<copy file="${build.bin.dir}/wrapped-secure.release.swf"
			tofile="${package.dir}/game-v${build.hard.version}.v${build.soft.version}.swf" overwrite="true"/>
	</target>

	<target name="package-test-swfs">

		<copy file="${build.bin.dir}/debug/game-test-debug.swf" tofile="${package.dir}/game-v${build.hard.version}.v${build.soft.version}.debug.test.swf" failonerror="false"/>
		<if>
			<available file="${build.bin.dir}/release/game-test-release.swf"/>
			<then>
				<copy file="${build.bin.dir}/release/game-test-release.swf" tofile="${package.dir}/game-v${build.hard.version}.v${build.soft.version}.test.swf" failonerror="false"/>
			</then>
			<else>
				<copy file="${build.bin.dir}/debug/game-test-debug.swf" tofile="${package.dir}/game-v${build.hard.version}.v${build.soft.version}.test.swf" failonerror="false"/>
			</else>
		</if>
		<if>
			<available file="${build.bin.dir}/release/gameloader-test.swf"/>
			<then>
				<copy file="${build.bin.dir}/release/gameloader-test.swf" tofile="${package.dir}/gameloader-v${build.gameloader.swf.version}.test.swf" failonerror="false"/>
			</then>
			<else>
				<copy file="${build.bin.dir}/debug/gameloader-test.swf" tofile="${package.dir}/gameloader-v${build.gameloader.swf.version}.test.swf" failonerror="false"/>
			</else>
		</if>

	</target>

	<!-- ****************************************************************************** -->
	<!--					Client Module Builds										-->
	<!-- ****************************************************************************** -->

	<target name="build-client-incremental" unless="full.build.only.enabled">
		<delete dir="${package.dir}"/>
		<delete dir="${release.dir}"/>
		<mkdir dir="${package.dir}"/>
		<mkdir dir="${release.dir}"/>
		<copy file="${versions.file}" todir="${package.dir}"/>

		<copy file="${build.bin.dir}/wrapped-secure.debug.swf" tofile="${package.dir}/game-v${build.hard.version}.v${build.soft.version}.debug.swf"/>
		<copy file="${build.bin.dir}/wrapped-secure.release.swf" tofile="${package.dir}/game-v${build.hard.version}.v${build.soft.version}.swf"/>
		<copy file="${build.bin.dir}/secure.gameloader.swf" tofile="${package.dir}/gameloader-v${build.gameloader.swf.version}.swf"/>
		<antcall target="package-wrapped-swfs"/>

		<!-- Package the unobfscated test SWFs -->
		<antcall target="package-test-swfs"/>

		<antcall target="-get-incremental-list"/>
		<exec executable="/bin/bash" dir="." failonerror="true">
			<arg value="-c"/>
			<arg line='"${build.tools.dir}/client/stageFiles.sh ${package.dir} ${build.dir}/build_file.list original-org"'/>
		</exec>

		<property name="new.assets.version" value="true"/>
		<antcall target="-versionize-assets"/>

		<delete dir="${package.dir}/src"/>

		<mkdir dir="${release.dir}"/>
		<tar destfile="${release.dir}/release.tgz" compression="gzip">
			<tarfileset dir="${package.dir}" dirmode="775" filemode="664">
				   <include name="**/*"/>
			</tarfileset>
		</tar>

		<copy file="${versions.file}" todir="${release.dir}"/>

		<tar destfile="${build.dir}/${client.archive.name}.tgz" compression="gzip">
			<tarfileset dir="${release.dir}">
		    	<include name="**/*"/>
			</tarfileset>
		</tar>
	</target>

	<target name="build-client-full">
		<delete dir="${package.dir}"/>
		<delete dir="${release.dir}"/>
		<mkdir dir="${package.dir}"/>
		<mkdir dir="${release.dir}"/>
		<copy file="${versions.file}" todir="${package.dir}"/>

		<copy file="${build.bin.dir}/wrapped-secure.debug.swf" tofile="${package.dir}/game-v${build.hard.version}.v${build.soft.version}.debug.swf"/>
		<copy file="${build.bin.dir}/wrapped-secure.release.swf" tofile="${package.dir}/game-v${build.hard.version}.v${build.soft.version}.swf"/>
		<copy file="${build.bin.dir}/secure.gameloader.swf" tofile="${package.dir}/gameloader-v${build.gameloader.swf.version}.swf"/>
		<antcall target="package-wrapped-swfs"/>

		<!-- Package the unobfscated test SWFs -->
		<antcall target="package-test-swfs"/>

		<property name="new.assets.version" value="true"/>
		<antcall target="-versionize-assets"/>

		<mkdir dir="${release.dir}"/>
		<tar destfile="${release.dir}/release.tgz" compression="gzip">
			<tarfileset dir="${package.dir}" dirmode="775" filemode="664">
				   <include name="**/*"/>
			</tarfileset>
		</tar>

		<copy file="${versions.file}" todir="${release.dir}"/>

		<tar destfile="${build.dir}/${client.archive.name}-full.tgz" compression="gzip">
			<tarfileset dir="${release.dir}">
		    	<include name="**/*"/>
			</tarfileset>
		</tar>
	</target>

	<!-- ****************************************************************************** -->
	<!--					Assets Module Builds										-->
	<!-- ****************************************************************************** -->

	<target name="build-assets-incremental" unless="full.build.only.enabled">
		<delete dir="${package.dir}"/>
		<delete dir="${release.dir}"/>
		<mkdir dir="${package.dir}"/>
		<mkdir dir="${release.dir}"/>
		<copy file="${versions.file}" todir="${package.dir}"/>

		<antcall target="-get-incremental-list"/>
		<exec executable="/bin/bash" dir="." failonerror="true">
			<arg value="-c"/>
			<arg line='"${build.tools.dir}/client/stageFiles.sh ${package.dir} ${build.dir}/build_file.list original-org"'/>
		</exec>

		<mkdir dir="${package.dir}/assets/images/feeddialog"/>
		<copy todir="${package.dir}/assets/images/feeddialog" failonerror="false">
			<fileset dir="${package.dir}/assets/streamposts">
				<include name="**/*"/>
			</fileset>
		</copy>

		<move file="${package.dir}/src/staging/assets" todir="${package.dir}" failonerror="false"/>
		<delete dir="${package.dir}/src"/>

		<mkdir dir="${release.dir}"/>
		<tar destfile="${release.dir}/release.tgz" compression="gzip">
			<tarfileset dir="${package.dir}" dirmode="775" filemode="664">
				   <include name="**/*"/>
			</tarfileset>
		</tar>

		<copy file="${versions.file}" todir="${release.dir}"/>

		<tar destfile="${build.dir}/${assets.archive.name}.tgz" compression="gzip">
			<tarfileset dir="${release.dir}">
		    	<include name="**/*"/>
			</tarfileset>
		</tar>
	</target>

	<target name="build-assets-full">
		<delete dir="${package.dir}"/>
		<delete dir="${release.dir}"/>
		<mkdir dir="${package.dir}"/>
		<mkdir dir="${release.dir}"/>
		<copy file="${versions.file}" todir="${package.dir}"/>

		<copy todir="${package.dir}">
			<fileset dir="${src.dir}/staging">
				<include name="assets/**"/>
				<exclude name="assets/handbook/**"/>
				<exclude name="assets/en.v*.txt"/>
				<exclude name="assets/versioned_assets.properties"/>
			</fileset>
		</copy>

		<mkdir dir="${package.dir}/assets/images/feeddialog"/>
		<copy todir="${package.dir}/assets/images/feeddialog" failonerror="false">
			<fileset dir="${package.dir}/assets/streamposts">
				<include name="**/*"/>
			</fileset>
		</copy>

		<mkdir dir="${release.dir}"/>
		<tar destfile="${release.dir}/release.tgz" compression="gzip">
			<tarfileset dir="${package.dir}" dirmode="775" filemode="664">
				   <include name="**/*"/>
			</tarfileset>
		</tar>

		<copy file="${versions.file}" todir="${release.dir}"/>

		<tar destfile="${build.dir}/${assets.archive.name}-full.tgz" compression="gzip">
			<tarfileset dir="${release.dir}">
		    	<include name="**/*"/>
			</tarfileset>
		</tar>
	</target>

	<target name="get-commonant" if="get.commonant.enabled">
		<mkdir dir="${commonant.dir}"/>
		<property name="commonant.url" value="${commonant.build.url}/artifact/dist/commonant.tgz"/>
		<get src="${commonant.url}" dest="${commonant.dir}/commonant.tgz" usetimestamp="true" username="${jenkins.username}" password="${jenkins.password}"/>
		<untar src="${commonant.dir}/commonant.tgz" dest="." compression="gzip"/>
        	<ant target="clean" dir="commonant" antFile="build.xml" inheritAll="false" />
	</target>

	<!-- ********************************************************************************** -->
	<!--							Versioning Targets										-->
	<!-- ********************************************************************************** -->
	<target name="get-client-versions" depends="-get-hard-soft-versions, -get-managed-assets-versions">
		<property name="build.release.version" value="0.0.0"/>
	</target>

	<target name="-get-versions" depends="get-client-versions, get-base-release-versions, -get-branch-info">
		<!-- Soft version is going to be the SVN head revision number to guarantee uniqueness -->
		<property name="build.soft.version" value="${build.svn.build.version}"/>
		<property name="build.gameloader.swf.version" value="${build.svn.build.version}"/>

		<echo message="******** Build Properties ********"/>
		<echo message="Release:	${build.release.version}"/>
		<echo message="Build time:	${build.time}"/>
		<echo message="Branch:	${build.branch.name}"/>
		<echo message="SVN Base:	${build.svn.base.version}"/>
		<echo message="SVN Build:	${build.svn.build.version}"/>
		<echo message="Hard:	${build.hard.version}"/>
		<echo message="Soft:	${build.soft.version}"/>
		<echo message="Sound:	${sounds.version}"/>
		<echo message="Handbook:	${handbook.version}"/>
		<echo message="Game Loader:	${build.gameloader.swf.version}"/>

		<property name="client.archive.name" value="${product.module}-${build.time}"/>
		<property name="assets.archive.name" value="wc-fb-assets-${build.time}"/>
		<property name="game.swf" value="game-v${build.hard.version}.v${build.soft.version}.swf"/>
	</target>

	<target name="-set-versions-file">
		<property name="versions.file" location="${build.dir}/version.properties"/>
		<echo message="product.name=${product.name}${nl}" file="${versions.file}" append="true" />
		<echo message="product.module=${product.module}${nl}" file="${versions.file}" append="true" />
		<echo message="build.time=${build.time}${nl}" file="${versions.file}" append="true" />
		<echo message="build.project=${build.project}${nl}" file="${versions.file}" append="true" />
		<echo message="build.number=${build.number}${nl}" file="${versions.file}" append="true" />
		<echo message="hard.version=${build.hard.version}${nl}" file="${versions.file}" append="true" />
		<echo message="soft.version=${build.soft.version}${nl}" file="${versions.file}" append="true" />
		<echo message="sounds.version=${sounds.version}${nl}" file="${versions.file}" append="true" />
		<echo message="handbook.version=${handbook.version}${nl}" file="${versions.file}" append="true" />
		<echo message="gameloader.version=${build.gameloader.swf.version}${nl}" file="${versions.file}" append="true" />
		<echo message="branch.name=${build.branch.name}${nl}" file="${versions.file}" append="true" />
		<echo message="svn.base.version=${build.svn.base.version}${nl}" file="${versions.file}" append="true" />
		<echo message="svn.build.version=${build.svn.build.version}${nl}" file="${versions.file}" append="true" />
		<echo message="package.manager=${package.manager}${nl}" file="${versions.file}" append="true" />
	</target>

	<target name="-get-last-build-versions">
		<property name="last.version.url" value="${jenkins.url}/job/${build.project}/lastSuccessfulBuild/artifact/dist/version.properties"/>
		<get src="${last.version.url}" dest="${build.dir}/last.version.properties" username="${jenkins.username}" password="${jenkins.password}"/>
		<!-- Loading svn.build.version -->
		<loadproperties srcfile="${build.dir}/last.version.properties">
			<filterchain>
				<linecontainsregexp>
					<regexp pattern="svn.build.version=([0-9]*)"/>
				</linecontainsregexp>
			</filterchain>
		</loadproperties>
		<echo message="SVN Build Version: ${svn.build.version}"/>
	</target>

	<target name="-get-last-build-concon-salt" depends="get-dependent-libs">
		<!-- Loading concon.salt -->
		<loadproperties srcfile="${src.dir}/bin/battleclient.version.properties">
			<filterchain>
				<linecontainsregexp>
					<regexp pattern="concon.salt=([a-f0-9]*)"/>
				</linecontainsregexp>
			</filterchain>
		</loadproperties>
		<echo message="ConCon salt: ${concon.salt}"/>
	</target>

	<!-- Get the build versions from the latest production release -->
	<target name="get-base-release-versions">
		<exec executable="/bin/bash" dir="${build.dir}" failonerror="true">
			<arg value="-c"/>
			<arg line='"${S3} --force get ${s3.url}/${s3.production.env}/version.properties base-version.properties"'/>
		</exec>
		<property file="${build.dir}/base-version.properties"/>
	</target>

	<target name="-get-hard-soft-versions">
		<tempfile property="global.temp" deleteonexit="true"/>
		<copy file="${global.as}" tofile="${global.temp}"/>
		<replaceregexp file="${global.temp}"
		               match=".*public static var _version:int = ([0-9]+);.*"
		               replace="global.hard.version=\1"
		               byline="true"
		/>
		<loadproperties srcfile="${global.temp}">
		  <filterchain>
		  	<linecontainsregexp>
		  	  <regexp pattern="global.hard.version=([0-9]*)"/>
		  	</linecontainsregexp>
		  </filterchain>
		</loadproperties>
		<property name="build.hard.version" value="${global.hard.version}"/>
	</target>

	<target name="-get-managed-assets-versions">
		<property name="versionizer.dir" location="${build.tools.dir}/client/versionizer"/>
		<property name="managed.properties" location="${src.dir}/staging/assets/versioned_assets.properties"/>
		<exec executable="/bin/bash" dir="${root.dir}" failonerror="true">
			<arg value="-c"/>
			<arg line='"perl -I ${versionizer.dir} ${versionizer.dir}/versionizeAssets.pl --action=GET_VERSIONS --origins=CDN --manage=${managed.properties} --cdn-dev-environment=${cdn.dev.environment} --output=${build.dir}"'/>
		</exec>
		<property file="${build.dir}/assets.properties"/>
		<property name="new.assets.version" value="true"/>
	</target>

	<target name="-versionize-assets">
		<echo message="Sound Swfs being packaged"/>
		<copy todir="${package.dir}/assets/sounds">
			<fileset dir="${src.dir}/staging/assets/sounds">
				<include name="**/*.swf"/>
			</fileset>
			<mapper type="regexp" from="(.*).swf" to="\1.v${sounds.version}.swf" />
		</copy>
		<copy file="${src.dir}/staging/assets/sounds/audio_config.xml" tofile="${package.dir}/assets/sounds/audio_config.v${sounds.version}.xml"/>
		<echo message="Handbook Swfs being packaged"/>
		<copy todir="${package.dir}/assets/handbook">
			<fileset dir="${src.dir}/staging/assets/handbook">
				<include name="*.swf"/>
			</fileset>
			<mapper type="regexp" from="(.*).v1.swf" to="\1.v${handbook.version}.swf" />
		</copy>
	</target>

	<!-- ********************************************************************************** -->
	<!--							Branch Targets											-->
	<!-- ********************************************************************************** -->
	<target name="-get-branch-info" depends="get-branch-info">
		<property name="build.branch.name" value="${branch.name}"/>

		<!-- The base svn version number is the svn build version from the latest production push which is in svn.build.version -->
		<property name="build.svn.base.version" value="${svn.build.version}"/>
		<property name="build.svn.build.version" value="${svn.head.version}"/>
	</target>

	<target name="-get-incremental-list" unless="full.build.only.enabled">
		<if><available file="${build.dir}/build_file.list"/>
			<then>
				<echo message="Incremental file list already generated: ${build.dir}/build_file.list"/>
			</then>
			<else>
				<exec executable="/bin/bash" dir="${root.dir}" failonerror="true">
					<env key="SVNURL" value="${svn.url}"/>
					<arg value="-c"/>
					<arg line='"${build.tools.dir}/svnUtils.sh --action=GET-INCREMENTAL --output=${build.dir}/build_file.list --from=${build.svn.base.version} --branch=${branch.name} --repo=${repository.name} --module=client"'/>
				</exec>
			</else>
		</if>
	</target>

	<!-- ********************************************************************************** -->
	<!--							Salt Targets											-->
	<!-- ********************************************************************************** -->
	<target name="-get-salt-properties">
		<get src="${salt.build.url}" dest="${build.dir}/salt.properties"
			username="${jenkins.username}" password="${jenkins.password}"/>
		<property file="${build.dir}/salt.properties"/>
		<!-- PRINT SALT.PROPERTIES RAW FILE -->
		<exec executable="/bin/bash" dir="${root.dir}" failonerror="true">
			<arg value="-c"/>
			<arg line='"cat ${build.dir}/salt.properties"'/>
		</exec>
	</target>

	<target name="update-salt" depends="-get-last-build-concon-salt">

		<!-- Let's make sure AIBox and Client flash code actually use the same salt (they absolutely have to!)-->
		<condition property="salts-do-not-match">
		    <not><equals arg1="${concon.salt}" arg2="${server.salt}"/></not>
		</condition>
		<fail if="salts-do-not-match" message="ConCon salt '${concon.salt}' and server.salt '${server.salt}' do not match. Please make sure ConCon and FB-Client builds are using the same salt. Check ConCon logs, hardcodedunitdata.cpp and FB-Client logs for details." />

		<exec executable="/bin/bash" dir="${root.dir}" failonerror="true">
			<arg value="-c"/>
			<arg line='"php ${build.tools.dir}/saltUtils.php --update=${client.salt} --product=WC"'/>
		</exec>
		<echo message="LOGIN.as salt:"/>
		<exec executable="/bin/bash" dir="${src.dir}" failonerror="true">
			<arg value="-c"/>
			<arg line='"grep decodeSalt LOGIN.as"'/>
		</exec>
		<echo message="URLLoaderApi.as salt:"/>
		<exec executable="/bin/bash" dir="${src.dir}" failonerror="true">
			<arg value="-c"/>
			<arg line='"grep decodeSalt URLLoaderApi.as"'/>
		</exec>
	</target>

	<target name="debug-versions" depends="-init-env, -init, init-common, -get-salt-properties, update-salt, -get-versions">
		<antcall target="-get-incremental-list"/>
	</target>

	<!-- ********************************************************************************** -->
	<!--							Update GameDataPreloader 								-->
	<!-- ********************************************************************************** -->
	<target name="update-gamedatapreloader">
		<exec executable="/bin/bash" dir="${root.dir}" failonerror="true">
			<arg value="-c"/>
			<arg line="scripts/update_game_preloader.sh"/>
		</exec>
	</target>

</project>
