--- src/OrderedRequestLoaderAndNativeDataOrganizer.as
+++ src/OrderedRequestLoaderAndNativeDataOrganizer.as
@@ -1,6 +1,9 @@
 package {   import com.adverserealms.log.Logger;+	import com.cc.assets.AssetManager;+	import com.cc.interfaces.ICDNDataLoader;+	import com.cc.interfaces.IDataLoader;   import com.cc.models.Flags;   import com.cc.units.ImportedSpriteSheetData;   import com.cc.units.PlatoonPropManifest;@@ -11,12 +14,22 @@
   import com.cc.worldmap.Worldmap;   import com.cc.worldmap.WorldmapController;   import com.kixeye.wc.resources.WCLocalizer;+	import com.kixeye.wc.resources.WCLocalizerWrapper;   //O.R.L.A.N.D.O   public class OrderedRequestLoaderAndNativeDataOrganizer-	{+	{+		public static const PRIORITY_OPTIONAL:int = -1;+		public static const PRIORITY_DEFAULT:int = 0;+		public static const PRIORITY_PREFFERED:int = 5;+		public static const PRIORITY_REQUIRED:int = 10;+		//loadList is a list of loaders that we care about, like required(blocking) data+		public static var loadList:Vector.<IDataLoader>;+     public function initialize():void     {+			//this list doesnt really execute anything, it just keeps track of data that is already loading+			loadList = Vector.<IDataLoader>([PlatoonPropManifest.instance, ImportedSpriteSheetData.instance, new WCLocalizerWrapper(), AssetManager.instance]);       startLoggingIn();     }@@ -36,9 +49,14 @@
       ConfigDataLoader.addEventListener(ConfigDataLoadEvent.LOAD_CDN_MANIFEST_DATA, finishedLoadingCDNManifest);-			PlatoonPropManifest.instance.signalProcessedData.addOnce(finishedLoadingBlockingData);-			WCLocalizer.signalLoadedLocalizationData.addOnce(finishedLoadingBlockingData);-			ImportedSpriteSheetData.signalSetupSkinData.addOnce(finishedLoadingBlockingData);+			//add listeners for data being loaded, so we can know when it's all done+			for each (var loader:IDataLoader in loadList)+			{+				if (loader is ICDNDataLoader && isRequired(loader))+				{+					loader.loadedData.addOnce(finishedLoadingBlockingData);+				}+			}       WorldmapUtils.setUp();       Worldmap.Setup();@@ -72,11 +90,38 @@
     private function hasLoadedAllBlockingData():Boolean     {-			return PlatoonPropManifest.instance.hasLoadedProperties &&-				WCLocalizer.hasLoadedLocalizationData &&-				ImportedSpriteSheetData.instance.hasLoadedSkinData();+			for each (var loader:IDataLoader in loadList)+			{+				if (loader is ICDNDataLoader && isRequired(ICDNDataLoader(loader).priority) && !loader.hasLoadedData())+				{+					return false;+				}+			}+			return true;     }+		public static function getPriorityFromKey(key:String):int+		{+			for each (var loader:IDataLoader in loadList)+			{+				if (loader is ICDNDataLoader && ICDNDataLoader(loader).CDNKey == key)+				{+					return ICDNDataLoader(loader).priority;+				}+			}+			return PRIORITY_DEFAULT;+		}++		public static function isKeyRequired(key:String):Boolean+		{+			return isRequired(getPriorityFromKey(key));+		}++		public static function isRequired(priority:int):Boolean+		{+			return priority >= PRIORITY_REQUIRED;+		}+     private function finishedLoadingAllBlockingData():void     {       log("finished loading all blocking data");@@ -90,7 +135,7 @@
     private function log(message:String):void     {-			//Logger.debug(message);+			Logger.debug(message);     }   } }\ No newline at end of file